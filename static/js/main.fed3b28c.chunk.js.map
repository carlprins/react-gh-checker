{"version":3,"sources":["formInput/formInput.js","formSelect/formSelect.js","formSection/formSection.js","formContainer/formContainer.js","App.js","serviceWorker.js","index.js"],"names":["FormInput","props","state","userInput","handleUserInput","bind","e","this","setState","target","value","className","name","type","onChange","React","Component","FormSelect","handleChange","handleSubmit","event","alert","preventDefault","onSubmit","options","map","option","FormSection","sectionName","sectionInputs","input","section1","id","section2","FormContainer","formTitle","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fed3b28c.chunk.js","sourcesContent":["import React from 'react';\nimport './formInput.css';\n\nclass FormInput extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = { userInput: \"\" }\n        this.handleUserInput = this.handleUserInput.bind(this);\n    }\n    handleUserInput(e) {\n        this.setState({userInput: e.target.value});\n    }\n    render(){\n        return (\n            <div className=\"InputItem\">\n                <question>{this.props.name}</question>\n                <input type={this.props.type} onChange={this.handleUserInput} value={this.state.userInput} />\n                <h2>{this.state.userInput}</h2>\n            </div>\n        )\n    }\n}\n\nexport default FormInput;","import React from 'react';\n\nclass FormSelect extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {value: ''};\n  \n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n  \n    handleChange(event) {\n      this.setState({value: event.target.value});\n    }\n  \n    handleSubmit(event) {\n      alert('Your favorite flavor is: ' + this.state.value);\n      event.preventDefault();\n    }\n  \n    render() {\n      return (\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            {this.props.name}\n            <select value={this.state.value} onChange={this.handleChange}>\n              {this.props.options.map(option => <option value={option}>{option}</option>)}\n              \n            </select>\n          </label>\n          <h2>{this.state.value}</h2>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      );\n    }\n  }\n\n  export default FormSelect;","import React from 'react';\nimport FormInput from '../formInput/formInput'\nimport FormSelect from '../formSelect/formSelect';\nimport './formSection.css';\n\nclass FormSection extends React.Component {\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return (\n            <div className=\"FormSection\">\n                <h1>{this.props.sectionName}</h1>\n                {this.props.sectionInputs.map(input => {\n                    if (input.type === \"text\") {\n                        return <FormInput name={input.name} type={input.type} />\n                    } else if (input.type === \"dropdown\") {\n                        return <FormSelect name={input.name} options={input.options} />\n                    } else if (input.type === \"date\") {\n                        return <FormInput name={input.name} type={input.type} />\n                    } else if (input.type === \"number\") {\n                        return <FormInput name={input.name} type={input.type} />\n                    }\n                })}\n            </div>\n        )\n    }\n}\n\nexport default FormSection;\n\n","import React from 'react';\nimport FormSection from '../formSection/formSection';\nimport './formContainer.css';\n\nconst section1 = [\n    {\n        id: 1,\n        name: \"Retailer\",\n        type: \"dropdown\",\n        options: [\"Select\", \"Origin\", \"AGL\", \"EnergyAustralia\", \"Powershop\", \"Red Energy\", \"Alinta\"]\n    }, {\n        id: 2,\n        name: \"Bill Start Date\",\n        type: \"date\",\n        options: []\n    }, {\n        id: 3,\n        name: \"Bill End Date\",\n        type: \"date\",\n        options: []\n    }\n]\n\nconst section2 = [\n    {\n        id: 1,\n        name: \"Period Start Date\",\n        type: \"date\",\n        options: []\n\n    }, {\n        id: 2,\n        name: \"Period End Date\",\n        type: \"date\",\n        options: []\n    }, {\n        id: 3,\n        name: \"Peak Usage\",\n        type: \"number\",\n        options: []\n    }, {\n        id: 4,\n        name: \"Peak Rate\",\n        type: \"number\",\n        options: []\n    }\n]\n\nclass FormContainer extends React.Component {\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return (\n            <div className=\"FormContainer\">\n                <h1>{this.props.formTitle}</h1>\n                <FormSection sectionName=\"Basic Information\" sectionInputs={section1} />\n                <FormSection sectionName=\"Period Information\" sectionInputs={section2} />\n            </div>\n            \n            \n        )\n    }\n}\n\nexport default FormContainer;","import React from 'react';\nimport FormContainer from './formContainer/formContainer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <FormContainer formTitle=\"Form Container\" />\n        \n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}