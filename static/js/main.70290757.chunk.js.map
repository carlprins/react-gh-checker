{"version":3,"sources":["Requirements/Requirements.js","Data/Data.js","formInput/formInput.js","Calculations/Calculations.js","CalcDisplay/CalcDisplay.js","PeriodDetails/PeriodDetails.js","BillDetails/BillDetails.js","Messaging/Messaging.js","formSelect/formSelect.js","FormButton/FormButton.js","formSection/formSection.js","LowerNAV/LowerNAV.js","formContainer/formContainer.js","App.js","serviceWorker.js","index.js"],"names":["screens","screen1","head","par","questions","name","label","type","options","buttons","newScreenState","screen2","screen3","screen4","billInput","key","map","retailer","billCalc","billDays","FormInput","props","state","userInput","handleUserInput","bind","e","value","target","this","setState","onChange","className","React","Component","dateDiff","startDate","endDate","a","Date","CalcDisplay","periodFields","alias","PeriodDetails","field","handleDateChange","Calc","calcFields","billFields","Messaging","question","FormSelect","handleChange","handleSubmit","event","alert","preventDefault","option","Button","onClick","handleClick","newScreen","LowerNav","screen","button","changeScreen","FormContainer","fuelType","billStartDate","billEndDate","openingBalance","closingBalance","calcBillTotal","period1StartDate","period1EndDate","calcBillDays","peakUsage","peakRate","calcUsageCharges","dailySupplyCharge","calcSupplyCharges","calcGrossBill","calcControl","dateDiffDays","grossControlCharges","grossClosingBalance","netControlCharges","netClosingBalance","App","formTitle","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70290757.chunk.js","sourcesContent":["const screens = {\n    screen1: {\n        head: \"Welcome to Bill Checker\",\n        par: \"Fill out your details and we'll start checking\",\n        questions: [\n            {\n                name: 'fuelType',\n                label: 'Is this an electricity or gas bill?',\n                type: 'dropdown',\n                options: [\"Please select\",\"Electricity\",\"Natural Gas\"]\n            },{\n                name: 'retailer',\n                label: 'Who is your service provider?',\n                type: 'dropdown',\n                options: [\"Please select\",\"EnergyAustralia\",\"AGL\",\"Origin Energy\"]\n            }\n        ],\n        buttons: [\n            {\n                name: 'nextButton',\n                label: 'Next',\n                type: 'Right Nav Button',\n                newScreenState: 'screen2',\n                options: []\n            }\n        ]\n    },\n    screen2: {\n        head: \"What period does this bill cover?\",\n        par: \"We'd like to understand the time period for your bill\",\n        questions: [\n            {\n                name: 'billStartDate',\n                label: 'Bill start date',\n                type: 'date',\n                options: []\n            },{\n                name: 'billEndDate',\n                label: 'Bill end date',\n                type: 'date',\n                options: []\n            }\n        ],\n        buttons: [\n            {\n                name: 'backButton',\n                label: 'Back',\n                type: 'Left Nav Button',\n                newScreenState: \"screen1\",\n                options: []\n            },{\n                name: 'nextButton',\n                label: 'Next',\n                type: 'Right Nav Button',\n                newScreenState: 'screen3',\n                options: []\n            }\n        ]\n    },\n    screen3: {\n        head: \"Opening and Closing Balance\",\n        par: \"Let's work out what charges you incurred during this bill\",\n        questions: [\n            {\n                name: 'openingBalance',\n                label: 'What was the opening balance on this bill?',\n                type: 'number',\n                options: []\n            },{\n                name: 'netClosingBalance',\n                label: 'What is the net amount owed if you pay before Due date?',\n                type: 'number',\n                options: []\n            },{\n                name: 'grossClosingBalance',\n                label: 'What is the amount owed if you miss your due date?',\n                type: 'number',\n                options: []\n            }\n        ],\n        buttons: [\n            {\n                name: 'backButton',\n                label: 'Back',\n                type: 'Left Nav Button',\n                newScreenState: \"screen2\",\n                options: []\n            },{\n                name: 'nextButton',\n                label: 'Next',\n                type: 'Right Nav Button',\n                newScreenState: 'screen4',\n                options: []\n            }\n        ]\n    },\n    screen4: {\n        head: \"This is screen 4\",\n        par: \"Let's work out what charges you incurred during this bill\",\n        questions: [\n            {\n                name: 'openingBalance',\n                label: 'What was the opening balance on this bill?',\n                type: 'number',\n                options: []\n            },{\n                name: 'netClosingBalance',\n                label: 'What is the net amount owed if you pay before Due date?',\n                type: 'number',\n                options: []\n            },{\n                name: 'grossClosingBalance',\n                label: 'What is the amount owed if you miss your due date?',\n                type: 'number',\n                options: []\n            }\n        ],\n        buttons: [\n            {\n                name: 'backButton',\n                label: 'Back',\n                type: 'Left Nav Button',\n                newScreenState: \"screen3\",\n                options: []\n            },{\n                name: 'nextButton',\n                label: 'Next',\n                type: 'Right Nav Button',\n                newScreenState: 'screen5',\n                options: []\n            }\n        ]\n    }\n}\n\nconst retailers = [\n    {\n        name: \"Origin Energy\",\n        key: \"origin\"\n    }, {\n        name: \"AGL\",\n        key: \"agl\"\n    }, {\n        name: \"EnergyAustralia\",\n        key: \"energyaustralia\"\n    }\n]\n\nconst reqFields = [\n    {\n        id: 1,\n        name: \"retailer\",\n        alias: \"Retailer\",\n        type: \"dropdown\",\n        options: retailers.map(retailer => retailer.name)\n    }, {\n        id: 2,\n        name: \"period1StartDate\",\n        alias: \"Period 1 Start Date\",\n        type: \"date\",\n        options: []\n    }, {\n        id: 3,\n        name: \"period1EndDate\",\n        alias: \"Period 1 End Date\",\n        type: \"date\",\n        options: []\n    }, {\n        id: 4,\n        name: \"openingBalance\",\n        alias: \"Opening Balance\",\n        type: \"number\",\n        options: []\n    }, {\n        id: 5,\n        name: \"closingBalance\",\n        alias: \"Closing Balance\",\n        type: \"number\",\n        options: []\n    },{\n        id: 6,\n        name: \"peakUsage\",\n        alias: \"Peak Usage (kWh)\",\n        type: \"number\",\n        options: []\n    }, {\n        id: 7,\n        name: \"peakRate\",\n        alias: \"Peak Rate (c/kWh)\",\n        type: \"number\",\n        options: []\n    }, {\n        id: 8,\n        name: \"dailySupplyCharge\",\n        alias: \"Daily Supply Charge (c/day)\",\n        type: \"number\",\n        options: []\n    }\n]\n\nexport { reqFields, screens }","\nexport const billInput = {\n    \n}\n\nexport const billCalc = {\n    billDays: '',\n}\n\nexport const billPeriods = []","import React from 'react';\nimport './formInput.css';\n\nclass FormInput extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = { userInput: \"\" }\n        this.handleUserInput = this.handleUserInput.bind(this);\n    }\n    handleUserInput(e) {\n        let value = e.target.value\n        this.setState({userInput: value});\n        this.props.onChange(e)/*.then(resolved => {\n            return\n        })*/;\n    }\n    render(){\n        return (\n            <div className=\"InputItem\">\n                <p>{this.props.label}</p>\n                <input type={this.props.type} onChange={this.handleUserInput} value={this.state.userInput} name={this.props.name} />\n                \n            </div>\n        )\n    }\n}\n\nexport default FormInput;","import { billCalc } from '../Data/Data'\n\nexport const dateDiff = (startDate,endDate) => {\n    let a = new Date(startDate);\n    let b = new Date(endDate);\n    let days = (b-a)/(1000 * 60 * 60 *24)+1\n    return days\n}","import React from 'react';\nimport { billCalc, billInput } from '../Data/Data'\nimport './CalcDisplay.css';\n\nclass CalcDisplay extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            billDays: 0\n        }\n    }\n    render(){\n        return (\n            <div className=\"CalcDisplay\">\n                <p>This is the Calc Display Component {billCalc.billDays}</p>\n                <p>The number of days in the bill (from DB) is: {billCalc.billDays}</p>\n            </div>\n            \n        )\n    }\n}\nexport default CalcDisplay;","import React from 'react';\nimport './PeriodDetails.css';\nimport FormInput from '../formInput/formInput';\n\nconst periodFields = [\n    {\n        name: 'periodStartDate',\n        alias: 'Period Start Date',\n        type: 'date',\n    }, {\n        name: 'periodEndDate',\n        alias: 'Period End Date',\n        type: 'date',\n    }, {\n        name: 'peakUsage',\n        alias: 'Peak Usage',\n        type: 'number',\n    }, {\n        name: 'peakRate',\n        alias: 'Peak Rate',\n        type: 'number',\n    }, {\n        name: 'supplyCharge',\n        alias: 'Daily Supply Charge',\n        type: 'number',\n    }\n]\n\nclass PeriodDetails extends React.Component {\n    render(){\n        return (\n            <div className=\"PeriodDetails\">\n                <p>Please enter details from your first bill period</p>\n                {periodFields.map(field => {\n                    return <FormInput alias={field.alias} name={field.name} type={field.type} onChange={this.handleDateChange} Calc={this.calcFields} />\n                })}\n                <input></input>\n            </div>\n            \n        )\n    }\n}\n\nexport default PeriodDetails","import React from 'react';\nimport './BillDetails.css';\nimport { billInput, billCalc } from '../Data/Data';\nimport FormInput from '../formInput/formInput';\nimport { dateDiff } from '../Calculations/Calculations'\nimport CalcDisplay from '../CalcDisplay/CalcDisplay';\nimport PeriodDetails from '../PeriodDetails/PeriodDetails';\n\nconst billFields = [\n    {\n        name: 'billStartDate',\n        alias: 'Bill Start Date',\n        type: 'date',\n    }, {\n        name: 'billEndDate',\n        alias: 'Bill End Date',\n        type: 'date',\n    }, {\n        name: 'numberOfPeriods',\n        alias: 'Number of Periods',\n        type: 'number',\n    }, {\n        name: 'openingBalance',\n        alias: 'Opening Balance',\n        type: 'number',\n    }, {\n        name: 'closingBalance',\n        alias: 'Closing Balance',\n        type: 'number',\n    }\n]\nclass BillDetails extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            numberOfPeriods: 1,\n            billStartDate: '',\n            billEndDate: '',\n            billDays: '',\n        }\n        this.handleDateChange = this.handleDateChange.bind(this);\n        this.calcFields = this.calcFields.bind(this);\n    }\n\n    handleDateChange = async (e) => {\n        const enteredDate = e.target.value\n        const name = e.target.name\n        this.setState({ [name]: enteredDate } )\n        billInput[name] = enteredDate\n    }\n\n    calcFields = () => {\n        let billDays = dateDiff(this.state.billStartDate,this.state.billEndDate)\n        billCalc.billDays = billDays\n        this.setState( {billDays: billDays} )\n    }\n\n    render(){\n        return (\n            <div className=\"BillDetails\">\n                <p>This is the Bill Details Component</p>\n                {billFields.map(field => {\n                    return <FormInput alias={field.alias} name={field.name} type={field.type} onChange={this.handleDateChange} Calc={this.calcFields} />\n                })}\n                <PeriodDetails />\n                <CalcDisplay />\n            </div>\n            \n            \n        )\n    }\n}\n\nexport default BillDetails","import React from 'react';\nimport {screens} from '../Requirements/Requirements';\n\nclass Messaging extends React.Component {\n    render(){\n        return (\n            <div className=\"Messaging\">\n                <h1>{screens[this.props.question].head}</h1>\n                <p>{screens[this.props.question].par}</p>\n                \n            </div>\n        )\n    }\n}\n\nexport default Messaging","import React from 'react';\nimport './formSelect.css';\n\nclass FormSelect extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { userInput: '' };\n  \n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n  \n    handleChange(e) {\n      let value = e.target.value\n      this.setState({ userInput: value});\n      this.props.onChange(e)/*.then(result => {return})*/;\n    }\n  \n    handleSubmit(event) {\n      alert('Your favorite flavor is: ' + this.state.value);\n      event.preventDefault();\n    }\n  \n    render() {\n      return (\n        <form>\n          <label className=\"Dropdown\">\n            <p>{this.props.label}</p>\n            <select value={this.state.value} onChange={this.handleChange} name={this.props.name}>\n              {this.props.options.map(option => <option value={option} key={1}>{option}</option>)}\n              \n            </select>\n          </label>\n                    \n        </form>\n      );\n    }\n  }\n\n  export default FormSelect;","import './FormButton.css';\nimport React from 'react';\n\nclass Button extends React.Component {\n    render(){\n        return (\n            <div className=\"Button\">\n                <button onClick={() => this.props.handleClick(`${this.props.newScreen}`)} >{this.props.label}</button>\n            </div>\n        )\n    }\n}\n\nexport default Button;","import React from 'react';\nimport FormInput from '../formInput/formInput'\nimport FormSelect from '../formSelect/formSelect';\nimport './formSection.css';\n\nclass FormSection extends React.Component {\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return (\n            <div className=\"FormSection\">\n                <h1>{this.props.sectionName}</h1>\n                {this.props.sectionInputs.map(input => {\n                    if (input.type === \"text\") {\n                        return <FormInput name={input.name} type={input.type} key={input.id} />\n                    } else if (input.type === \"dropdown\") {\n                        return <FormSelect name={input.name} options={input.options} key={input.id} />\n                    } else if (input.type === \"date\") {\n                        return <FormInput name={input.name} type={input.type} key={input.id} />\n                    } else if (input.type === \"number\") {\n                        return <FormInput name={input.name} type={input.type} key={input.id} />\n                    }\n                })}\n            </div>\n        )\n    }\n}\n\nexport default FormSection;\n\n","import React from 'react';\nimport './LowerNAV.css';\nimport {screens} from '../Requirements/Requirements'\nimport Button from '../FormButton/FormButton';\n\n\n\nclass LowerNav extends React.Component {\n    render(){\n        return (\n            <div className=\"LowerNav\">\n                \n                {screens[this.props.screen].buttons.map(button => {\n                    return <Button label={button.label} newScreen={button.newScreenState} handleClick={this.props.changeScreen} />\n                })}\n                \n            </div>\n        )\n    }\n}\n\nexport default LowerNav","import React from 'react';\nimport {screens} from '../Requirements/Requirements';\nimport {billInput} from '../Data/Data'\nimport {reqFields} from '../Requirements/Requirements';\nimport BillDetails from '../BillDetails/BillDetails'\nimport Messaging from '../Messaging/Messaging';\nimport CalcDisplay from '../CalcDisplay/CalcDisplay';\nimport FormSection from '../formSection/formSection';\nimport './formContainer.css';\n\nimport FormInput from '../formInput/formInput';\nimport FormSelect from '../formSelect/formSelect';\nimport FormButton from '../FormButton/FormButton';\nimport {billCalc} from '../Data/Data';\nimport LowerNav from '../LowerNAV/LowerNAV';\n\nexport const periodData = {\n    calcGrossBill: \"Hi there\",\n    value: 100\n}\n\n\nclass FormContainer extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = { \n            //New format\n            screen: 'screen3',\n            //Input fields captured\n            fuelType: '',\n            retailer: '',\n            billStartDate: '',\n            billEndDate: '',\n            openingBalance: '',\n            closingBalance: '',\n            //All fields below are legacy\n            \n            \n            calcBillTotal: '',\n            period1StartDate: '',\n            period1EndDate: '',\n            // Calcs coming in from the Bill\n            calcBillDays: '',\n            \n            peakUsage: '',\n            peakRate: '',\n            calcUsageCharges: '',\n            dailySupplyCharge: '',\n            calcSupplyCharges: '',\n            calcGrossBill: '',\n            calcControl: '',\n\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.calcFields = this.calcFields.bind(this);\n        this.changeScreen = this.changeScreen.bind(this);\n        \n    }\n    calcFields(){\n        //Bill Days Calculation\n        let a = new Date(billInput.billStartDate)\n        let b = new Date(billInput.billEndDate)\n        let dateDiffDays = (b-a)/(1000 * 60 * 60 * 24) + 1\n        billInput.billDays = dateDiffDays\n        \n        //Control Gross/Net Charges\n        billInput.grossControlCharges = billInput.grossClosingBalance - billInput.openingBalance\n        billInput.netControlCharges = billInput.netClosingBalance - billInput.openingBalance\n\n        /*let field = this.state\n        let billTotal = field.closingBalance - field.openingBalance\n        let usageCharges = field.peakUsage * field.peakRate /100\n        let a = new Date(field.period1StartDate)\n        let b = new Date(field.period1EndDate)\n        let period1Days = (b-a)/(1000 * 60 * 60 *24)+1\n        let supplyCharges = field.dailySupplyCharge/100 * period1Days\n        let grossBill = usageCharges + supplyCharges\n        let controlDiff = Math.round((billTotal - grossBill),2)\n        \n        this.setState( {\n            calcBillTotal: billTotal,\n            calcUsageCharges: usageCharges,\n            calcPeriod1Days: period1Days,\n            calcSupplyCharges: supplyCharges,\n            calcGrossBill: grossBill,\n            calcControl: controlDiff,\n            })*/\n        \n    }\n    handleChange = (e) => {\n        const value = e.target.value\n        const name = e.target.name\n        // Update the \"database\"\n        billInput[name] = value\n        this.calcFields()\n        //Update the state and trigger re-render\n        this.setState({ [name]: value } )\n        \n    }\n    changeScreen = (newScreenState) => {\n        this.setState({screen: newScreenState})\n        \n    }\n\n    render(){\n        return (\n            <div className=\"FormContainer\" >\n                <div className=\"ScreenContent\">\n                                        \n                    <Messaging question={this.state.screen} />\n                    \n                    {screens[this.state.screen].questions.map(field => {\n                        if (field.type === \"dropdown\") {\n                            return <FormSelect name={field.name} label={field.label} options={field.options} onChange={this.handleChange} />\n                        } else if (field.type === \"date\") {\n                            return <FormInput name={field.name} label={field.label} type={field.type} onChange={this.handleChange} />\n                        } else if (field.type === \"number\") {\n                            return <FormInput name={field.name} label={field.label} type={field.type} onChange={this.handleChange} />\n                        }\n                        \n                    })}\n                    \n                    <LowerNav screen={this.state.screen} changeScreen={this.changeScreen} />\n                    <p>Fuel type in DB: {billInput.fuelType}</p>\n                    <p>Retailer in DB: {billInput.retailer}</p>\n                    <p>billStartDate in DB: {billInput.billStartDate}</p>\n                    <p>billEndDate in DB: {billInput.billEndDate}</p>\n                    <p>There are {billInput.billDays} days in this bill</p>\n                    <p>Opening Balance was {billInput.openingBalance}</p>\n                    <p>Closing Balance was {billInput.netClosingBalance} and {billInput.grossClosingBalance}</p>\n                    <p>Control total net: {billInput.netControlCharges} gross: {billInput.grossControlCharges}</p>\n                </div>\n                \n                <div className=\"CalcFields\">\n                    <h2>Calculated Fields</h2>\n                    <p>Selected Fuel Type (from State)</p>\n                    <p className=\"Answer\">{this.state.fuelType}</p>\n                    <p>Selected Retailer (from State)</p>\n                    <p className=\"Answer\">{this.state.retailer}</p>\n                    <p>Bill Start Date</p>\n                    <p className=\"Answer\">{this.state.billStartDate}</p>\n                    <p>Bill End Date</p>\n                    <p className=\"Answer\">{this.state.billEndDate}</p>\n                    \n                    <p>Usage Charges</p>\n                    <p>{this.state.calcUsageCharges}</p>\n                    <p>Supply Charges</p>\n                    <p>{this.state.calcSupplyCharges}</p>\n                    <p>Gross Bill Total</p>\n                    <p>{this.state.calcGrossBill}</p>\n                    <p>Control Total</p>\n                    <p>{this.state.calcControl}</p>\n                </div>\n                <div>\n                    \n                    \n                </div>\n            </div>\n            \n            \n        )\n    }\n}\n\nexport default FormContainer;","import React from 'react';\nimport FormContainer from './formContainer/formContainer';\nimport Messaging from './Messaging/Messaging';\nimport periodData from './formContainer/formContainer';\nimport './App.css';\n\nconst messaging = {\n  introduction: \"Welcome to Handled\",\n  accountBalance: \"What is the balance of your account\"\n}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {screen: \"introduction\"}\n  }\n  render() {\n    return (\n      <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Hello and welcome to Bill Checker</p>\n        \n        <FormContainer formTitle=\"Bill Checker\" />\n        \n        \n      </header>\n    </div>\n    )\n  }}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}