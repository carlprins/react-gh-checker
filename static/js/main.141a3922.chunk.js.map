{"version":3,"sources":["formInput/formInput.js","formSelect/formSelect.js","Requirements/Requirements.js","formSection/formSection.js","formContainer/formContainer.js","App.js","serviceWorker.js","index.js"],"names":["FormInput","props","state","userInput","handleUserInput","bind","e","value","target","this","setState","onChange","then","resolved","Calc","className","name","type","React","Component","FormSelect","handleChange","handleSubmit","result","event","alert","preventDefault","options","map","option","key","reqFields","id","retailer","FormContainer","a","console","log","billTotal","OpeningBalance","ClosingBalance","Retailer","calcFields","formTitle","field","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.141a3922.chunk.js","sourcesContent":["import React from 'react';\nimport './formInput.css';\n\nclass FormInput extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = { userInput: \"\" }\n        this.handleUserInput = this.handleUserInput.bind(this);\n    }\n    handleUserInput(e) {\n        let value = e.target.value\n        this.setState({userInput: value});\n        this.props.onChange(e).then(resolved => {\n            this.props.Calc()\n        });\n    }\n    render(){\n        return (\n            <div className=\"InputItem\">\n                <p>{this.props.name}</p>\n                <input type={this.props.type} onChange={this.handleUserInput} value={this.state.userInput} name={this.props.name} />\n                <h2>{this.state.userInput}</h2>\n            </div>\n        )\n    }\n}\n\nexport default FormInput;","import React from 'react';\n\nclass FormSelect extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { userInput: '' };\n  \n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n  \n    handleChange(e) {\n      let value = e.target.value\n      this.setState({ userInput: value});\n      this.props.onChange(e).then(result => {return});\n    }\n  \n    handleSubmit(event) {\n      alert('Your favorite flavor is: ' + this.state.value);\n      event.preventDefault();\n    }\n  \n    render() {\n      return (\n        <form>\n          <label>\n            {this.props.name}\n            <select value={this.state.value} onChange={this.handleChange} name={this.props.name}>\n              {this.props.options.map(option => <option value={option} key={1}>{option}</option>)}\n              \n            </select>\n          </label>\n          <h2>{this.state.userInput}</h2>\n          \n        </form>\n      );\n    }\n  }\n\n  export default FormSelect;","const retailers = [\n    {\n        name: \"Origin Energy\",\n        key: \"origin\"\n    }, {\n        name: \"AGL\",\n        key: \"agl\"\n    }, {\n        name: \"EnergyAustralia\",\n        key: \"energyaustralia\"\n    }\n]\n\nconst reqFields = [\n    {\n        id: 1,\n        name: \"Retailer\",\n        type: \"dropdown\",\n        options: retailers.map(retailer => retailer.name)\n    }, {\n        id: 2,\n        name: \"Bill Start Date\",\n        type: \"date\",\n        options: []\n    }, {\n        id: 3,\n        name: \"Bill End Date\",\n        type: \"date\",\n        options: []\n    }, {\n        id: 4,\n        name: \"OpeningBalance\",\n        type: \"number\",\n        options: []\n    }, {\n        id: 5,\n        name: \"ClosingBalance\",\n        type: \"number\",\n        options: []\n    },{\n        id: 4,\n        name: \"Period Start Date\",\n        type: \"date\",\n        options: []\n\n    }, {\n        id: 5,\n        name: \"Period End Date\",\n        type: \"date\",\n        options: []\n    }, {\n        id: 6,\n        name: \"Peak Usage\",\n        type: \"number\",\n        options: []\n    }, {\n        id: 7,\n        name: \"Peak Rate\",\n        type: \"number\",\n        options: []\n    }\n]\n\nexport default reqFields;","import React from 'react';\nimport FormInput from '../formInput/formInput'\nimport FormSelect from '../formSelect/formSelect';\nimport './formSection.css';\n\nclass FormSection extends React.Component {\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return (\n            <div className=\"FormSection\">\n                <h1>{this.props.sectionName}</h1>\n                {this.props.sectionInputs.map(input => {\n                    if (input.type === \"text\") {\n                        return <FormInput name={input.name} type={input.type} key={input.id} />\n                    } else if (input.type === \"dropdown\") {\n                        return <FormSelect name={input.name} options={input.options} key={input.id} />\n                    } else if (input.type === \"date\") {\n                        return <FormInput name={input.name} type={input.type} key={input.id} />\n                    } else if (input.type === \"number\") {\n                        return <FormInput name={input.name} type={input.type} key={input.id} />\n                    }\n                })}\n            </div>\n        )\n    }\n}\n\nexport default FormSection;\n\n","import React from 'react';\nimport FormSection from '../formSection/formSection';\nimport './formContainer.css';\nimport reqFields from '../Requirements/Requirements';\nimport FormInput from '../formInput/formInput';\nimport FormSelect from '../formSelect/formSelect';\n\n\nclass FormContainer extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = { \n            billTotal: 0,\n            OpeningBalance: 0,\n            ClosingBalance: 0,\n            Retailer: \"\"\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.calcFields = this.calcFields.bind(this);\n        \n    }\n    calcFields(){\n        let billTotal = this.state.ClosingBalance - this.state.OpeningBalance\n        this.setState( { billTotal: billTotal } )\n    }\n    handleChange = async (e) => {\n        const value = e.target.value\n        const name = e.target.name\n        console.log(value)\n        console.log(name)\n        this.setState({ [name]: value })\n        \n    }\n\n    render(){\n        return (\n            <div className=\"FormContainer\" >\n                <div className=\"FormHeading\">\n                    <h1>{this.props.formTitle}</h1>\n                    {reqFields.map(field => {\n                        if (field.type === \"number\") {\n                            return <FormInput name={field.name} type={field.type} onChange={this.handleChange} Calc={this.calcFields} />\n                        } else if (field.type === \"dropdown\") {\n                            return <FormSelect name={field.name} options={field.options} onChange={this.handleChange} />\n                        }\n\n                    })}\n                </div>\n                <div className=\"CalcFields\">\n                    <h2>Calculated Fields from this form</h2>\n                    <p>Opening Balance</p>\n                    <p>{this.state.OpeningBalance}</p>\n                    <p>Closing Balance</p>\n                    <p>{this.state.ClosingBalance}</p>\n                    <p>Calc Bill Total</p>\n                    <p>{this.state.billTotal}</p>\n                    <p>Selected Retailer</p>\n                    <p>{this.state.Retailer}</p>\n                    <input className=\"Button\" type=\"button\" onClick={this.calcFields} value=\"Calc now\"></input>\n                </div>\n                <div>\n                    \n                    \n                </div>\n            </div>\n            \n            \n        )\n    }\n}\n\nexport default FormContainer;","import React from 'react';\nimport FormContainer from './formContainer/formContainer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <FormContainer formTitle=\"Bill Checker\" />\n        \n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}