{"version":3,"sources":["Requirements/Requirements.js","Data/Data.js","formInput/formInput.js","Calculations/Calculations.js","CalcDisplay/CalcDisplay.js","PeriodDetails/PeriodDetails.js","BillDetails/BillDetails.js","Messaging/Messaging.js","formSelect/formSelect.js","FormButton/FormButton.js","formSection/formSection.js","LowerNAV/LowerNAV.js","formContainer/formContainer.js","App.js","serviceWorker.js","index.js"],"names":["screens","screen1","head","par","questions","name","label","type","options","buttons","newScreenState","screen2","screen3","billInput","key","map","retailer","billStartDate","billEndDate","fuelType","billCalc","billDays","FormInput","props","state","userInput","handleUserInput","bind","e","value","target","this","setState","onChange","then","resolved","className","React","Component","dateDiff","startDate","endDate","a","Date","CalcDisplay","periodFields","alias","PeriodDetails","field","handleDateChange","Calc","calcFields","billFields","Messaging","question","FormSelect","handleChange","handleSubmit","result","event","alert","preventDefault","option","Button","onClick","handleClick","newScreen","LowerNav","screen","button","changeScreen","FormContainer","openingBalance","closingBalance","calcBillTotal","period1StartDate","period1EndDate","calcBillDays","peakUsage","peakRate","calcUsageCharges","dailySupplyCharge","calcSupplyCharges","calcGrossBill","calcControl","billTotal","usageCharges","period1Days","supplyCharges","grossBill","controlDiff","Math","round","calcPeriod1Days","App","formTitle","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ebf5a3bf.chunk.js","sourcesContent":["const screens = {\n    screen1: {\n        head: \"Welcome to Bill Checker\",\n        par: \"Fill out your details and we'll start checking\",\n        questions: [\n            {\n                name: 'fuelType',\n                label: 'Is this an electricity or gas bill?',\n                type: 'dropdown',\n                options: [\"Please select\",\"Electricity\",\"Natural Gas\"]\n            },{\n                name: 'retailer',\n                label: 'Who is your service provider?',\n                type: 'dropdown',\n                options: [\"Please select\",\"EnergyAustralia\",\"AGL\",\"Origin Energy\"]\n            }\n        ],\n        buttons: [\n            {\n                name: 'backButton',\n                label: 'Back',\n                type: 'Left Nav Button',\n                newScreenState: 'screen1',\n                options: []\n            },{\n                name: 'nextButton',\n                label: 'Next',\n                type: 'Right Nav Button',\n                newScreenState: 'screen2',\n                options: []\n            }\n        ]\n    },\n    screen2: {\n        head: \"What period does this bill cover?\",\n        par: \"We'd like to understand the time period for your bill\",\n        questions: [\n            {\n                name: 'billStartDate',\n                label: 'Bill start date',\n                type: 'date',\n                options: []\n            },{\n                name: 'billEndDate',\n                label: 'Bill end date',\n                type: 'date',\n                options: []\n            }\n        ],\n        buttons: [\n            {\n                name: 'backButton',\n                label: 'Back',\n                type: 'Left Nav Button',\n                newScreenState: \"screen1\",\n                options: []\n            },{\n                name: 'nextButton',\n                label: 'Next',\n                type: 'Right Nav Button',\n                newScreenState: 'screen3',\n                options: []\n            }\n        ]\n    },\n    screen3: {\n        head: \"This is the third screen\",\n        par: \"We'd like to understand the time period for your bill\",\n        questions: [\n            {\n                name: 'billStartDate',\n                label: 'What is the starting date of this bill?',\n                type: 'date',\n                options: []\n            },{\n                name: 'billEndDate',\n                label: 'What is the end date of this bill?',\n                type: 'date',\n                options: []\n            }\n        ],\n        buttons: [\n            {\n                name: 'backButton',\n                label: 'Back',\n                type: 'Left Nav Button',\n                newScreenState: \"screen2\",\n                options: []\n            },{\n                name: 'nextButton',\n                label: 'Next',\n                type: 'Right Nav Button',\n                newScreenState: 'screen3',\n                options: []\n            }\n        ]\n    }\n}\n\nconst retailers = [\n    {\n        name: \"Origin Energy\",\n        key: \"origin\"\n    }, {\n        name: \"AGL\",\n        key: \"agl\"\n    }, {\n        name: \"EnergyAustralia\",\n        key: \"energyaustralia\"\n    }\n]\n\nconst reqFields = [\n    {\n        id: 1,\n        name: \"retailer\",\n        alias: \"Retailer\",\n        type: \"dropdown\",\n        options: retailers.map(retailer => retailer.name)\n    }, {\n        id: 2,\n        name: \"period1StartDate\",\n        alias: \"Period 1 Start Date\",\n        type: \"date\",\n        options: []\n    }, {\n        id: 3,\n        name: \"period1EndDate\",\n        alias: \"Period 1 End Date\",\n        type: \"date\",\n        options: []\n    }, {\n        id: 4,\n        name: \"openingBalance\",\n        alias: \"Opening Balance\",\n        type: \"number\",\n        options: []\n    }, {\n        id: 5,\n        name: \"closingBalance\",\n        alias: \"Closing Balance\",\n        type: \"number\",\n        options: []\n    },{\n        id: 6,\n        name: \"peakUsage\",\n        alias: \"Peak Usage (kWh)\",\n        type: \"number\",\n        options: []\n    }, {\n        id: 7,\n        name: \"peakRate\",\n        alias: \"Peak Rate (c/kWh)\",\n        type: \"number\",\n        options: []\n    }, {\n        id: 8,\n        name: \"dailySupplyCharge\",\n        alias: \"Daily Supply Charge (c/day)\",\n        type: \"number\",\n        options: []\n    }\n]\n\nexport { reqFields, screens }","\nexport const billInput = {\n    billStartDate: '01/01/2019',\n    billEndDate: '04/01/2019',\n    fuelType: '',\n}\n\nexport const billCalc = {\n    billDays: '',\n}\n\nexport const billPeriods = []","import React from 'react';\nimport './formInput.css';\n\nclass FormInput extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = { userInput: \"\" }\n        this.handleUserInput = this.handleUserInput.bind(this);\n    }\n    handleUserInput(e) {\n        let value = e.target.value\n        this.setState({userInput: value});\n        this.props.onChange(e).then(resolved => {\n            return\n        });\n    }\n    render(){\n        return (\n            <div className=\"InputItem\">\n                <p>{this.props.label}</p>\n                <input type={this.props.type} onChange={this.handleUserInput} value={this.state.userInput} name={this.props.name} />\n                <h2>{this.state.userInput}</h2>\n            </div>\n        )\n    }\n}\n\nexport default FormInput;","import { billCalc } from '../Data/Data'\n\nexport const dateDiff = (startDate,endDate) => {\n    let a = new Date(startDate);\n    let b = new Date(endDate);\n    let days = (b-a)/(1000 * 60 * 60 *24)+1\n    return days\n}","import React from 'react';\nimport { billCalc, billInput } from '../Data/Data'\nimport './CalcDisplay.css';\n\nclass CalcDisplay extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            billDays: 0\n        }\n    }\n    render(){\n        return (\n            <div className=\"CalcDisplay\">\n                <p>This is the Calc Display Component {billCalc.billDays}</p>\n                <p>The number of days in the bill (from DB) is: {billCalc.billDays}</p>\n            </div>\n            \n        )\n    }\n}\nexport default CalcDisplay;","import React from 'react';\nimport './PeriodDetails.css';\nimport FormInput from '../formInput/formInput';\n\nconst periodFields = [\n    {\n        name: 'periodStartDate',\n        alias: 'Period Start Date',\n        type: 'date',\n    }, {\n        name: 'periodEndDate',\n        alias: 'Period End Date',\n        type: 'date',\n    }, {\n        name: 'peakUsage',\n        alias: 'Peak Usage',\n        type: 'number',\n    }, {\n        name: 'peakRate',\n        alias: 'Peak Rate',\n        type: 'number',\n    }, {\n        name: 'supplyCharge',\n        alias: 'Daily Supply Charge',\n        type: 'number',\n    }\n]\n\nclass PeriodDetails extends React.Component {\n    render(){\n        return (\n            <div className=\"PeriodDetails\">\n                <p>Please enter details from your first bill period</p>\n                {periodFields.map(field => {\n                    return <FormInput alias={field.alias} name={field.name} type={field.type} onChange={this.handleDateChange} Calc={this.calcFields} />\n                })}\n                <input></input>\n            </div>\n            \n        )\n    }\n}\n\nexport default PeriodDetails","import React from 'react';\nimport './BillDetails.css';\nimport { billInput, billCalc } from '../Data/Data';\nimport FormInput from '../formInput/formInput';\nimport { dateDiff } from '../Calculations/Calculations'\nimport CalcDisplay from '../CalcDisplay/CalcDisplay';\nimport PeriodDetails from '../PeriodDetails/PeriodDetails';\n\nconst billFields = [\n    {\n        name: 'billStartDate',\n        alias: 'Bill Start Date',\n        type: 'date',\n    }, {\n        name: 'billEndDate',\n        alias: 'Bill End Date',\n        type: 'date',\n    }, {\n        name: 'numberOfPeriods',\n        alias: 'Number of Periods',\n        type: 'number',\n    }, {\n        name: 'openingBalance',\n        alias: 'Opening Balance',\n        type: 'number',\n    }, {\n        name: 'closingBalance',\n        alias: 'Closing Balance',\n        type: 'number',\n    }\n]\nclass BillDetails extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            numberOfPeriods: 1,\n            billStartDate: '',\n            billEndDate: '',\n            billDays: '',\n        }\n        this.handleDateChange = this.handleDateChange.bind(this);\n        this.calcFields = this.calcFields.bind(this);\n    }\n\n    handleDateChange = async (e) => {\n        const enteredDate = e.target.value\n        const name = e.target.name\n        this.setState({ [name]: enteredDate } )\n        billInput[name] = enteredDate\n    }\n\n    calcFields = () => {\n        let billDays = dateDiff(this.state.billStartDate,this.state.billEndDate)\n        billCalc.billDays = billDays\n        this.setState( {billDays: billDays} )\n    }\n\n    render(){\n        return (\n            <div className=\"BillDetails\">\n                <p>This is the Bill Details Component</p>\n                {billFields.map(field => {\n                    return <FormInput alias={field.alias} name={field.name} type={field.type} onChange={this.handleDateChange} Calc={this.calcFields} />\n                })}\n                <PeriodDetails />\n                <CalcDisplay />\n            </div>\n            \n            \n        )\n    }\n}\n\nexport default BillDetails","import React from 'react';\nimport {screens} from '../Requirements/Requirements';\n\nclass Messaging extends React.Component {\n    render(){\n        return (\n            <div className=\"Messaging\">\n                <h1>{screens[this.props.question].head}</h1>\n                <p>{screens[this.props.question].par}</p>\n                \n            </div>\n        )\n    }\n}\n\nexport default Messaging","import React from 'react';\nimport './formSelect.css';\n\nclass FormSelect extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { userInput: '' };\n  \n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n  \n    handleChange(e) {\n      let value = e.target.value\n      this.setState({ userInput: value});\n      this.props.onChange(e).then(result => {return});\n    }\n  \n    handleSubmit(event) {\n      alert('Your favorite flavor is: ' + this.state.value);\n      event.preventDefault();\n    }\n  \n    render() {\n      return (\n        <form>\n          <label className=\"Dropdown\">\n            {this.props.label}\n            <select value={this.state.value} onChange={this.handleChange} name={this.props.name}>\n              {this.props.options.map(option => <option value={option} key={1}>{option}</option>)}\n              \n            </select>\n          </label>\n          <h2>{this.state.userInput}</h2>\n          \n        </form>\n      );\n    }\n  }\n\n  export default FormSelect;","import './FormButton.css';\nimport React from 'react';\n\nclass Button extends React.Component {\n    render(){\n        return (\n            <div className=\"Button\">\n                <button onClick={() => this.props.handleClick(`${this.props.newScreen}`)} >{this.props.label} to {this.props.newScreen}</button>\n            </div>\n        )\n    }\n}\n\nexport default Button;","import React from 'react';\nimport FormInput from '../formInput/formInput'\nimport FormSelect from '../formSelect/formSelect';\nimport './formSection.css';\n\nclass FormSection extends React.Component {\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return (\n            <div className=\"FormSection\">\n                <h1>{this.props.sectionName}</h1>\n                {this.props.sectionInputs.map(input => {\n                    if (input.type === \"text\") {\n                        return <FormInput name={input.name} type={input.type} key={input.id} />\n                    } else if (input.type === \"dropdown\") {\n                        return <FormSelect name={input.name} options={input.options} key={input.id} />\n                    } else if (input.type === \"date\") {\n                        return <FormInput name={input.name} type={input.type} key={input.id} />\n                    } else if (input.type === \"number\") {\n                        return <FormInput name={input.name} type={input.type} key={input.id} />\n                    }\n                })}\n            </div>\n        )\n    }\n}\n\nexport default FormSection;\n\n","import React from 'react';\nimport './LowerNAV.css';\nimport {screens} from '../Requirements/Requirements'\nimport Button from '../FormButton/FormButton';\n\n\n\nclass LowerNav extends React.Component {\n    render(){\n        return (\n            <div className=\"LowerNav\">\n                \n                {screens[this.props.screen].buttons.map(button => {\n                    return <Button label={button.label} newScreen={button.newScreenState} handleClick={this.props.changeScreen} />\n                })}\n                \n            </div>\n        )\n    }\n}\n\nexport default LowerNav","import React from 'react';\nimport {screens} from '../Requirements/Requirements';\nimport {reqFields} from '../Requirements/Requirements';\nimport BillDetails from '../BillDetails/BillDetails'\nimport Messaging from '../Messaging/Messaging';\nimport CalcDisplay from '../CalcDisplay/CalcDisplay';\nimport FormSection from '../formSection/formSection';\nimport './formContainer.css';\n\nimport FormInput from '../formInput/formInput';\nimport FormSelect from '../formSelect/formSelect';\nimport FormButton from '../FormButton/FormButton';\nimport {billCalc} from '../Data/Data';\nimport LowerNav from '../LowerNAV/LowerNAV';\n\nexport const periodData = {\n    calcGrossBill: \"Hi there\",\n    value: 100\n}\n\n\nclass FormContainer extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = { \n            //New format\n            screen: 'screen1',\n            fuelType: 'not selected',\n            retailer: 'not selected',\n            billStartDate: '',\n            billEndDate: '',\n            //All fields below are legacy\n            \n            openingBalance: '',\n            closingBalance: '',\n            calcBillTotal: '',\n            period1StartDate: '',\n            period1EndDate: '',\n            // Calcs coming in from the Bill\n            calcBillDays: '',\n            \n            peakUsage: '',\n            peakRate: '',\n            calcUsageCharges: '',\n            dailySupplyCharge: '',\n            calcSupplyCharges: '',\n            calcGrossBill: '',\n            calcControl: '',\n\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.calcFields = this.calcFields.bind(this);\n        this.changeScreen = this.changeScreen.bind(this);\n        \n    }\n    calcFields(){\n        let field = this.state\n        let billTotal = field.closingBalance - field.openingBalance\n        let usageCharges = field.peakUsage * field.peakRate /100\n        let a = new Date(field.period1StartDate)\n        let b = new Date(field.period1EndDate)\n        let period1Days = (b-a)/(1000 * 60 * 60 *24)+1\n        let supplyCharges = field.dailySupplyCharge/100 * period1Days\n        let grossBill = usageCharges + supplyCharges\n        let controlDiff = Math.round((billTotal - grossBill),2)\n        \n        this.setState( {\n            calcBillTotal: billTotal,\n            calcUsageCharges: usageCharges,\n            calcPeriod1Days: period1Days,\n            calcSupplyCharges: supplyCharges,\n            calcGrossBill: grossBill,\n            calcControl: controlDiff,\n            })\n        /*this.setState( { calcUsageCharges: usageCharges} )\n        this.setState( { calcPeriod1Days: period1Days } )\n        this.setState( {calcSupplyCharges: supplyCharges} )*/\n    }\n    handleChange = async (e) => {\n        const value = e.target.value\n        const name = e.target.name\n        this.setState({ [name]: value } )\n        \n    }\n    changeScreen = (newScreenState) => {\n        this.setState({screen: newScreenState})\n        \n    }\n\n    render(){\n        return (\n            <div className=\"FormContainer\" >\n                <div className=\"ScreenContent\">\n                    <p>This is the Form Container</p>\n                    \n                    <Messaging question={this.state.screen} />\n                    \n                    {screens[this.state.screen].questions.map(field => {\n                        if (field.type === \"dropdown\") {\n                            return <FormSelect name={field.name} label={field.label} options={field.options} onChange={this.handleChange} />\n                        } else if (field.type === \"date\") {\n                            return <FormInput name={field.name} label={field.label} type={field.type} onChange={this.handleChange} />\n                        }\n                        \n                    })}\n                    \n                    <LowerNav screen={this.state.screen} changeScreen={this.changeScreen} />\n                    \n                </div>\n                \n                <div className=\"CalcFields\">\n                    <h2>Calculated Fields</h2>\n                    <p>Selected Fuel Type (from State)</p>\n                    <p className=\"Answer\">{this.state.fuelType}</p>\n                    <p>Selected Retailer (from State)</p>\n                    <p className=\"Answer\">{this.state.retailer}</p>\n                    <p>Bill Start Date</p>\n                    <p className=\"Answer\">{this.state.billStartDate}</p>\n                    <p>Bill End Date</p>\n                    <p className=\"Answer\">{this.state.billEndDate}</p>\n                    \n                    <p>Usage Charges</p>\n                    <p>{this.state.calcUsageCharges}</p>\n                    <p>Supply Charges</p>\n                    <p>{this.state.calcSupplyCharges}</p>\n                    <p>Gross Bill Total</p>\n                    <p>{this.state.calcGrossBill}</p>\n                    <p>Control Total</p>\n                    <p>{this.state.calcControl}</p>\n                </div>\n                <div>\n                    \n                    \n                </div>\n            </div>\n            \n            \n        )\n    }\n}\n\nexport default FormContainer;","import React from 'react';\nimport FormContainer from './formContainer/formContainer';\nimport Messaging from './Messaging/Messaging';\nimport periodData from './formContainer/formContainer';\nimport './App.css';\n\nconst messaging = {\n  introduction: \"Welcome to Handled\",\n  accountBalance: \"What is the balance of your account\"\n}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {screen: \"introduction\"}\n  }\n  render() {\n    return (\n      <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Hello and welcome to Bill Checker</p>\n        \n        <FormContainer formTitle=\"Bill Checker\" />\n        \n        \n      </header>\n    </div>\n    )\n  }}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}