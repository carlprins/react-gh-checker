{"version":3,"sources":["formInput/formInput.js","formSelect/formSelect.js","Requirements/Requirements.js","formSection/formSection.js","formContainer/formContainer.js","App.js","serviceWorker.js","index.js"],"names":["FormInput","props","state","userInput","handleUserInput","bind","e","value","target","this","setState","onChange","className","name","type","React","Component","FormSelect","handleChange","handleSubmit","event","alert","preventDefault","onSubmit","options","map","option","reqFields","id","key","retailer","FormContainer","billTotal","OpeningBalance","ClosingBalance","calcFields","formTitle","onClick","field","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c1520e64.chunk.js","sourcesContent":["import React from 'react';\nimport './formInput.css';\n\nclass FormInput extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = { userInput: \"\" }\n        this.handleUserInput = this.handleUserInput.bind(this);\n    }\n    handleUserInput(e) {\n        let value = e.target.value\n        this.setState({userInput: value});\n        this.props.onChange(e);\n    }\n    render(){\n        return (\n            <div className=\"InputItem\">\n                <question>{this.props.name}</question>\n                <input type={this.props.type} onChange={this.handleUserInput} value={this.state.userInput} name={this.props.name} />\n                <h2>{this.state.userInput}</h2>\n            </div>\n        )\n    }\n}\n\nexport default FormInput;","import React from 'react';\n\nclass FormSelect extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {value: ''};\n  \n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n  \n    handleChange(event) {\n      this.setState({value: event.target.value});\n    }\n  \n    handleSubmit(event) {\n      alert('Your favorite flavor is: ' + this.state.value);\n      event.preventDefault();\n    }\n  \n    render() {\n      return (\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            {this.props.name}\n            <select value={this.state.value} onChange={this.handleChange}>\n              {this.props.options.map(option => <option value={option}>{option}</option>)}\n              \n            </select>\n          </label>\n          <h2>{this.state.value}</h2>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      );\n    }\n  }\n\n  export default FormSelect;","const retailers = [\n    {\n        name: \"Origin Energy\",\n        key: \"origin\"\n    }, {\n        name: \"AGL\",\n        key: \"agl\"\n    }, {\n        name: \"EnergyAustralia\",\n        key: \"energyaustralia\"\n    }\n]\n\nconst reqFields = [\n    {\n        id: 1,\n        name: \"Retailer\",\n        type: \"dropdown\",\n        options: retailers.map(retailer => retailer.name)\n    }, {\n        id: 2,\n        name: \"Bill Start Date\",\n        type: \"date\",\n        options: []\n    }, {\n        id: 3,\n        name: \"Bill End Date\",\n        type: \"date\",\n        options: []\n    }, {\n        id: 4,\n        name: \"OpeningBalance\",\n        type: \"number\",\n        options: []\n    }, {\n        id: 5,\n        name: \"ClosingBalance\",\n        type: \"number\",\n        options: []\n    },{\n        id: 4,\n        name: \"Period Start Date\",\n        type: \"date\",\n        options: []\n\n    }, {\n        id: 5,\n        name: \"Period End Date\",\n        type: \"date\",\n        options: []\n    }, {\n        id: 6,\n        name: \"Peak Usage\",\n        type: \"number\",\n        options: []\n    }, {\n        id: 7,\n        name: \"Peak Rate\",\n        type: \"number\",\n        options: []\n    }\n]\n\nexport default reqFields;","import React from 'react';\nimport FormInput from '../formInput/formInput'\nimport FormSelect from '../formSelect/formSelect';\nimport './formSection.css';\n\nclass FormSection extends React.Component {\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return (\n            <div className=\"FormSection\">\n                <h1>{this.props.sectionName}</h1>\n                {this.props.sectionInputs.map(input => {\n                    if (input.type === \"text\") {\n                        return <FormInput name={input.name} type={input.type} key={input.id} />\n                    } else if (input.type === \"dropdown\") {\n                        return <FormSelect name={input.name} options={input.options} key={input.id} />\n                    } else if (input.type === \"date\") {\n                        return <FormInput name={input.name} type={input.type} key={input.id} />\n                    } else if (input.type === \"number\") {\n                        return <FormInput name={input.name} type={input.type} key={input.id} />\n                    }\n                })}\n            </div>\n        )\n    }\n}\n\nexport default FormSection;\n\n","import React from 'react';\nimport FormSection from '../formSection/formSection';\nimport './formContainer.css';\nimport reqFields from '../Requirements/Requirements';\nimport FormInput from '../formInput/formInput';\n\n\nclass FormContainer extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = { \n            billTotal: 0,\n            OpeningBalance: 0,\n            ClosingBalance: 0\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.calcFields = this.calcFields.bind(this);\n        \n    }\n    calcFields(){\n        let billTotal = this.state.ClosingBalance - this.state.OpeningBalance\n        this.setState({billTotal: billTotal})\n    }\n    handleChange(e) {\n        const value = e.target.value\n        const name = e.target.name\n        this.setState({ [name]: value })\n    }\n\n    render(){\n        return (\n            <div >\n                <div className=\"FormHeading\">\n                    <h1>{this.props.formTitle}</h1>\n                </div>\n                <div className=\"CalcFields\">\n                    <h2>Calculated Fields from this form</h2>\n                    <p>Opening Balance</p>\n                    <p>{this.state.OpeningBalance}</p>\n                    <p>Closing Balance</p>\n                    <p>{this.state.ClosingBalance}</p>\n                    <p>Calc Bill Total</p>\n                    <p>{this.state.billTotal}</p>\n                    <input type=\"button\" onClick={this.calcFields} value=\"Calc now\"></input>\n                </div>\n                <div className=\"FormContainer\">\n                    {reqFields.map(field => <FormInput name={field.name} type={field.type} onChange={this.handleChange} />)}\n                    \n                </div>\n            </div>\n            \n            \n        )\n    }\n}\n\nexport default FormContainer;","import React from 'react';\nimport FormContainer from './formContainer/formContainer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <FormContainer formTitle=\"Form Container\" />\n        \n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}